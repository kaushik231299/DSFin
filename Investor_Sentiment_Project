import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import numpy as np
import yfinance as yf
from datetime import datetime
from sklearn.linear_model import LinearRegression


# Load the dataset
file_path = '/Users/kaushikpurahoo/Downloads//SENTIMENT_copy.xlsx'
data = pd.read_excel(file_path, sheet_name='Sheet1')

# Remove rows with missing sentiment data
data.dropna(inplace=True)

# Inspect the data
#print(data.head())

# add new columns for determining change from previous period using .diff()
data['pdnd_change'] = data['pdnd'].diff()
data['ripo_change'] = data['ripo'].diff()
data['nipo_change'] = data['nipo'].diff()
data['cefd_change'] = data['cefd'].diff()
data['s_change'] = data['s'].diff()

# Drop the first row since it will have NaN values for the changes
data.dropna(subset=['pdnd_change', 'ripo_change', 'nipo_change', 'cefd_change', 's_change'], inplace=True)

# Inspect the data with new columns
#print(data.head())

# Assuming 'data' already contains the required columns: 'yearmo', 'SENT', 'CEFD', 'NIPO', 'RIPO', 'PDND', 'S'

# Convert 'yearmo' to datetime format if not already done
data['yearmo'] = pd.to_datetime(data['yearmo'], format='%Y%m')

# Prepare the data for linear regression
X_one = data[['cefd', 'nipo', 'ripo', 'pdnd', 's']].values
y_one = data['SENT'].values

# Perform linear regression
regression = LinearRegression(fit_intercept=False).fit(X_one, y_one)

# Extracting coefficients
coefficients = regression.coef_

# Creating the regression equation string
equation = f'SENT = {coefficients[0]:.4f} * cefd + {coefficients[1]:.4f} * nipo + {coefficients[2]:.4f} * ripo + {coefficients[3]:.4f} * pdnd + {coefficients[4]:.4f} * s'
print("Linear Regression Equation for SENT:")
print(equation)

# Convert 'yearmo' to a numerical format for regression
data['yearmo'] = pd.to_numeric(data['yearmo'])

# Prepare the data
X_two = data[['pdnd_change', 'ripo_change', 'nipo_change', 'cefd_change', 's_change', 'yearmo']]
y_two = data['SentimentChangesIndex']

# Standardize or normalize predictor variables
scaler = StandardScaler()
X_scaled = scaler.fit_transform(data[['pdnd_change', 'ripo_change', 'nipo_change', 'cefd_change', 's_change', 'yearmo']])

# Fit linear regression model
model = LinearRegression(fit_intercept=False)  # No intercept
model.fit(X_scaled, y_two)

# Get coefficients
coefficients = model.coef_

# Creating the regression equation string
equation_two = f'SentimentChangesIndex = {coefficients[0]:.4f} * pdnd_change + {coefficients[1]:.4f} * ripo_change + {coefficients[2]:.4f} * cefd_change + {coefficients[3]:.4f} * s_change'
print("Linear Regression Equation for SENT changes:")
print(equation_two)

# Plot SentimentChangesIndex versus yearmo
plt.figure(figsize=(10, 6))
plt.plot(data['yearmo'], data['SentimentChangesIndex'], marker='o', linestyle='-', color='b', markersize=3)
plt.title('Sentiment Changes Index over Time')
plt.xlabel('Year-Month (yearmo)')
plt.ylabel('Sentiment Changes Index')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()


# List of tickers
tickers = {'AMD', 'AAPL', 'INTC', 'ADI', 'JNJ', 'PFE', 'MRK', 'BMY', 'LLY', 'RF', 'JPM',
               'BAC', 'C', 'WFC', 'USB', 'PNC', 'HBAN', 'FITB', 'CLX', 'HRL', 'PG', 'KO', 'PEP',
               'K', 'CAG', 'LANC', 'CPB', 'SWK', 'BA', 'CAT', 'GE', 'PH', 'GGG', 'ITW', 'ALE',
               'NEE', 'DUK', 'ED', 'AEP', 'XEL', 'BKH', 'WEC', 'MRO', 'XOM', 'CVX', 'HES', 'MUR'}

# Fetch historical data
data = yf.download(tickers, start="1980-01-01", end="2023-12-31", interval='1mo')['Adj Close']

# Calculate monthly returns
returns = data.pct_change()

stock_returns = returns.dropna()

# Define a function to calculate rolling volatility
def calculate_rolling_volatility(returns, window=12):
    return returns.rolling(window=window).std()

# Calculate rolling 12-month volatility
rolling_volatility = calculate_rolling_volatility(stock_returns)

# Function to create decile portfolios based on rolling volatility
def create_decile_portfolios(returns, rolling_volatility):
    decile_portfolios = {}
    for date in rolling_volatility.index:
        # Get volatility for the date
        volatilities = rolling_volatility.loc[date].dropna()
        if len(volatilities) == 0:
            continue
        # Sort stocks by volatility
        sorted_stocks = volatilities.sort_values()
        # Determine the decile breakpoints
        deciles = np.array_split(sorted_stocks.index, 10)
        # Assign stocks to decile portfolios
        decile_assignment = {i+1: decile for i, decile in enumerate(deciles)}
        decile_portfolios[date] = decile_assignment
    return decile_portfolios

# Create decile portfolios
decile_portfolios = create_decile_portfolios(returns, rolling_volatility)

# Function to calculate equal-weighted returns for decile portfolios
def calculate_decile_equal_weighted_returns(returns, decile_portfolios):
    decile_returns = {i: [] for i in range(1, 11)}
    for date, deciles in decile_portfolios.items():
        for decile, stocks in deciles.items():
            decile_returns[decile].append(returns.loc[date, stocks].mean())
    decile_returns = pd.DataFrame(decile_returns, index=decile_portfolios.keys())
    return decile_returns

# Calculate decile portfolio equal-weighted returns
decile_equal_weighted_returns = calculate_decile_equal_weighted_returns(returns, decile_portfolios)

# Plot cumulative returns for decile portfolios
def plot_decile_cumulative_returns(decile_returns, title):
    cumulative_returns = (1 + decile_returns).cumprod()
    plt.figure(figsize=(14, 7))
    for decile in cumulative_returns.columns:
        plt.plot(cumulative_returns.index, cumulative_returns[decile], label=f'Decile {decile}')
    plt.title(title)
    plt.xlabel('Date')
    plt.ylabel('Cumulative Return')
    plt.legend()
    plt.show()

# Define ETF symbols for each category
etf_categories = {
    "Aggressive Growth": ["QQQ"],
    "Growth": ["VUG"],
    "Balanced": ["SUSA"],
    "Growth and Income": ["DGRO"],
    "Sector": ["XLV"],
    "Income Equity": ["SCHD"],
    "Income Mixed": ["MDIV"],
    "Asset Allocation": ["ACWI"]
}

# Update ETF tickers list based on new categories
etf_tickers = [ticker for sublist in etf_categories.values() for ticker in sublist]

# Fetch ETF data from Yahoo Finance
etfs_data = yf.download(etf_tickers, start="1986-01-01", end="2024-12-31", interval='1mo').dropna()

# Get adjusted close prices and trading volumes
adj_close = etfs_data['Adj Close']
volume = etfs_data['Volume']

# Calculate ETF flows as proxy: Price * Volume
MDV = adj_close * volume
etf_flow = MDV.diff()

# Calculate changes in flow
flow_changes = etf_flow.diff()

# Standardize the changes in fund flows data
scaler = StandardScaler()
flow_changes_standardized = scaler.fit_transform(flow_changes.dropna())

# Perform PCA on the standardized changes in fund flows data
pca = PCA(n_components=2)
principal_components = pca.fit_transform(flow_changes_standardized)

# Get the loadings for the first two principal components
loadings = pca.components_.T * np.sqrt(pca.explained_variance_)

# Create a DataFrame with loadings
etf_labels = [key for key in etf_categories.keys()]
loadings_df = pd.DataFrame(loadings, columns=['General Demand (PC1)', 'Speculative Demand (PC2)'], index=etf_labels)
print(loadings_df)


# Multiply loadings by -1 to reverse the trend
#loadings_df['General Demand (PC1)'] *= -1
#loadings_df['Speculative Demand (PC2)'] *= -1

# Data preparation
etf_labels = loadings_df.index
pc1_values = loadings_df['General Demand (PC1)']
pc2_values = loadings_df['Speculative Demand (PC2)']

# Sort the values for plotting (highest y-value to the leftmost)
pc1_sorted_indices = pc1_values.argsort()[::-1]  # Sort indices in descending order of PC1 values
pc1_sorted_labels = [etf_labels[i] for i in pc1_sorted_indices]
pc1_sorted_values = [pc1_values[i] for i in pc1_sorted_indices]

pc2_sorted_indices = pc2_values.argsort()[::-1]  # Sort indices in descending order of PC2 values
pc2_sorted_labels = [etf_labels[i] for i in pc2_sorted_indices]
pc2_sorted_values = [pc2_values[i] for i in pc2_sorted_indices]

# Plotting the first bar chart (PC1)
plt.figure(figsize=(10, 6))
plt.barh(pc1_sorted_labels, pc1_sorted_values, color='skyblue')
plt.xlabel('General Demand (PC1)')
plt.title('Principal Component 1 - General Demand')
plt.gca().invert_yaxis()  # Invert y-axis to have highest value on the left
plt.tight_layout()
plt.show()

# Plotting the second bar chart (PC2)
plt.figure(figsize=(10, 6))
plt.barh(pc2_sorted_labels, pc2_sorted_values, color='lightgreen')
plt.xlabel('Speculative Demand (PC2)')
plt.title('Principal Component 2 - Speculative Demand')
plt.gca().invert_yaxis()  # Invert y-axis to have highest value on the left
plt.tight_layout()
plt.show()

